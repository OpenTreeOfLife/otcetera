#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Thoughts on constructing the Full Supertree
\end_layout

\begin_layout Standard
In the 
\emph on
otcetera
\emph default
 pipeline, the synthesis tree is first constructed using a pruned taxonomy.
 This taxonomy has been pruned to remove any leaves that do not occur in
 one of the ranked input phylogenies.
 Therefore, a later step in the pipeline involves adding the pruned taxa
 back in to the synthesis tree.
 The resulting tree is the 
\emph on
full supertree.
 
\emph default
This document is an attempt to collect, and perhaps organize, thoughts on
 how the full supertree can or should be constructed, as well as related
 questions and concepts.
\end_layout

\begin_layout Standard
This document takes the approach that we should be able to use the sub-problem
 solver to construct the full supertree by feeding it a sequence of 2 trees:
\end_layout

\begin_layout Verbatim
otc-solve-subproblem grafted-solution.tre cleaned_ott.tre
\end_layout

\begin_layout Standard
Various other quick-and-dirty methods may be sufficient to achieve the result.
 However, the attempt to make the subproblem solver fast enough to solve
 this particular problem raises various issues with the subproblem solver.
 It also suggests various optimizations that may be useful more generally.
\end_layout

\begin_layout Section
Potential speed increases
\end_layout

\begin_layout Standard
In the current implementation of the BUILD algorithm, we have a number of
 places we take excessive computation time:
\end_layout

\begin_layout Itemize
We attempt to construct rooted splits (a.k.a.
 desIds) for each node.
 For a bifurcating tree, this operation should take time and memory quadratic
 in the number of leaves.
\end_layout

\begin_layout Itemize
We attempt to construct connected component by considering each split in
 a tree separately.
 However, considering splits for nodes that are not direct children of the
 root is redundant.
\end_layout

\begin_layout Itemize
Much of the time is spent in determining which splits are imposed at a given
 level in the tree, and therefore need not be passed to subproblems.
\end_layout

\begin_deeper
\begin_layout Itemize
When different splits have the same leaf set, we should be able to get a
 speedup.
\end_layout

\begin_layout Itemize
When some splits have the full leaf set, we should be able to get a speedup.
\end_layout

\end_deeper
\begin_layout Itemize
We recompute connected components from scratch each time BUILD is recursively
 called on a subproblem.
 This could be avoided by incrementally removing edges from the graph and
 discovering new connected components that appear, as in Henzinger et al.
 
\emph on
However, it is unclear if an algorithm similar to Henzinger et al could
 be used to find the edges to remove at each step.
\end_layout

\begin_layout Itemize
When we have two trees 
\begin_inset Formula $T_{1}$
\end_inset

 and 
\begin_inset Formula $T_{2}$
\end_inset

, and either 
\begin_inset Formula $\mathcal{L}(T_{1})\subseteq\mathcal{L}(T_{2})$
\end_inset

 or 
\begin_inset Formula $\mathcal{L}(T_{2})\subseteq\mathcal{L}(T_{1})$
\end_inset

, then it should be possible to determine all conflicting splits in a single
 pass over the trees, similar to 
\family typewriter
otc-detectcontested
\family default
.
\end_layout

\begin_layout Section
The problem
\end_layout

\begin_layout Standard
When the subproblem to be solved consists of two ranked trees, 
\begin_inset Formula $T_{1}$
\end_inset

 and 
\begin_inset Formula $T_{2}$
\end_inset

, and the second tree is the taxonomy, then we have 
\begin_inset Formula $\mathcal{L}(T_{1})\subseteq\mathcal{L}(T_{2})$
\end_inset

.
 For each (rooted) split in 
\begin_inset Formula $T_{2}$
\end_inset

, we can determine whether that split is consistent with 
\begin_inset Formula $T_{1}$
\end_inset

.
 We claim that each split in 
\begin_inset Formula $T_{2}$
\end_inset

 is either consistent with 
\begin_inset Formula $T_{1}$
\end_inset

, or incompatible with at least one split of 
\begin_inset Formula $T_{1}$
\end_inset

.
 We can therefore remove each split of 
\begin_inset Formula $T_{2}$
\end_inset

 that is inconsistent with 
\begin_inset Formula $T_{1}$
\end_inset

 to form a new tree 
\begin_inset Formula $T_{2}^{\prime}$
\end_inset

.
 The splits of 
\begin_inset Formula $T_{1}$
\end_inset

 and 
\begin_inset Formula $T_{2}^{\prime}$
\end_inset

 are then jointly consistent.
 Furthermore, by combining the trees 
\begin_inset Formula $T_{1}$
\end_inset

 and 
\begin_inset Formula $T_{2}^{\prime}$
\end_inset

, we obtain a new tree in which the splits of 
\begin_inset Formula $T_{1}$
\end_inset

 that are not implied by 
\begin_inset Formula $T_{2}^{\prime}$
\end_inset

 may not fully specify where certain taxa of 
\begin_inset Formula $T_{2}^{\prime}$
\end_inset

 are placed.
 We resolve this ambiguity by placing such taxa rootward, but their range
 of attachment extends over specific branches in the tree obtained by combining
 
\begin_inset Formula $T_{1}$
\end_inset

 and 
\begin_inset Formula $T_{2}^{\prime}$
\end_inset

.
 All of these branches derive from 
\begin_inset Formula $T_{1}$
\end_inset

 but not from 
\begin_inset Formula $T_{2}^{\prime}$
\end_inset

.
\end_layout

\begin_layout Section
Questions
\end_layout

\begin_layout Itemize
Is there a single, unique solution to this problem?
\end_layout

\begin_layout Itemize
When running BUILD, is it possible to construct a 
\emph on
reason
\emph default
 for the lack of inclusion of each split? Specifically, can we say which
 split (or set of splits) conflicts with that split?
\end_layout

\end_body
\end_document
